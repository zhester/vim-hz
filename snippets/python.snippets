##############################################################################
#
# Python Snippets
#
##############################################################################

#=============================================================================
# Structural Comments
#=============================================================================

# Grep-able Note to Self
snippet zih
	### ZIH TODO: ${1}
# end of snippet

# Separator Bars
snippet b0
	#=============================================================================
snippet b1
	    #=========================================================================
# end of snippet

# Section Comments
snippet c0
	#-----------------------------------------------------------------------------
	# ${1}
	#-----------------------------------------------------------------------------
snippet c1
	    #-------------------------------------------------------------------------
	    # ${1}
	    #-------------------------------------------------------------------------
snippet c2
	        #---------------------------------------------------------------------
	        # ${1}
	        #---------------------------------------------------------------------
snippet c3
	            #-----------------------------------------------------------------
	            # ${1}
	            #-----------------------------------------------------------------
snippet c4
	                #-------------------------------------------------------------
	                # ${1}
	                #-------------------------------------------------------------
snippet c5
	                    #---------------------------------------------------------
	                    # ${1}
	                    #---------------------------------------------------------
snippet c6
	                        #-----------------------------------------------------
	                        # ${1}
	                        #-----------------------------------------------------
# end of snippet

#=============================================================================
# Function and Class Templates
#=============================================================================

# Function/Class Skeletons
snippet fun
	#=============================================================================
	def ${1:name}():
	    """
	    ${2:description}
	    """
	    ${3:pass}
snippet funargs
	#=============================================================================
	def ${1:name}( *args, **kwargs ):
	    """
	    ${2:description}
	    """
	    ${3:pass}
snippet meth
	    #=========================================================================
	    def ${1:name}( self ):
	        """
	        ${2:description}
	        """
	        ${3:pass}
snippet class
	#=============================================================================
	class ${1:name}( ${3:object} ):
	    """
	    ${2:description}
	    """
	
	
	    #=========================================================================
	    def __init__( self ):
	        """
	        Initializes a $1 object.
	        """
	        super( $1, self ).__init__()
	
snippet classargs
	#=============================================================================
	class ${1:name}( ${3:object} ):
	    """
	    ${2:description}
	    """
	
	
	    #=========================================================================
	    def __init__( self, *args, **kwargs ):
	        """
	        Initializes a $1 object.
	        """
	        super( $1, self ).__init__( *args, **kwargs )
	
snippet error
	#=============================================================================
	class ${1:ModuleError}( ${3:RuntimeError} ):
	    """
	    ${2:description}
	    """
	    pass
# end of snippet


#=============================================================================
# Stuff for Working With PyQt5
#=============================================================================

# Instant demo program

# Extending a widget
snippet widget
	#=============================================================================
	class ${1:name}( qt.QWidget ):
	    """
	    ${2:description}
	    """
	
	
	    #=========================================================================
	    def __init__( self, *args ):
	        """
	        Initializes a $1 widget.
	        """
	        super().__init__( *args )
	
# Layouts
snippet qgrid
	layout = qt.QGridLayout( self )
	layout.setSpacing( 0 )
	layout.setContentsMargins( 0, 0, 0, 0 )
snippet qvbox
	layout = qt.QVBoxLayout( self )
	layout.setSpacing( 0 )
	layout.setContentsMargins( 0, 0, 0, 0 )
snippet qhbox
	layout = qt.QHBoxLayout( self )
	layout.setSpacing( 0 )
	layout.setContentsMargins( 0, 0, 0, 0 )
# end of snippet

# Instant PyQt5 Demo Program
	#!/usr/bin/env python3
	#=============================================================================
	#
	# Instant Demo Program
	#
	#=============================================================================
	
	"""
	Instant Demo Program
	====================
	"""
	
	
	import sys
	
	import PyQt5.QtWidgets as qt
	
	
	#=============================================================================
	class Demo( qt.QWidget ):
	    """
	    Demonstration
	    """
	
	
	    #=========================================================================
	    def __init__( self, *args ):
	        """
	        Initializes a Demonstration widget.
	        """
	
	        # Window Setup
	        super().__init__( *args )
	        self.setWindowTitle( 'Demo' )
	        self.setStyleSheet( '''
	            QWidget {
	                color: #E0E0E0;
	                background-color: #303030;
	            }
	        ''' )
	
	        # Layout Setup
	        layout = qt.QGridLayout( self )
	        layout.setSpacing( 0 )
	        layout.setContentsMargins( 10, 10, 10, 10 )
	
	        # Widget Population
	        button = qt.QPushButton( 'Hello', self )
	        button.clicked.connect( self._handle_button )
	        layout.addWidget( button, 0, 0 )
	
	
	    #=========================================================================
	    def _handle_button( self, event ):
	        """
	        Handles button clicks.
	        """
	        print( 'Clicked!' )
	
	
	#=============================================================================
	def main( argv ):
	    """
	    Script execution entry point
	
	    @param argv List of arguments passed to the script
	    @return     Shell exit code (0 = success)
	    """
	
	    # Qt Application
	    app = qt.QApplication( argv )
	
	    # Application Window
	    w = Demo()
	    w.show()
	
	    # Application Loop
	    return app.exec_()
	
	
	#=============================================================================
	if __name__ == "__main__":
	    sys.exit( main( sys.argv ) )
	
# end of snippet


#-----------------------------------------------------------------------------
# Python Protocol Templates
#-----------------------------------------------------------------------------

# Descriptor Template
snippet descriptor
	#=============================================================================
	class ${1:Descriptor}( ${3:object} ):
	    """
	    ${2:A Descriptor}
	    """
	
	
	    #=========================================================================
	    def __init__( self, name, doc = '' ):
	        """
	        Initializes a $1 object.
	
	        @param name The name of the object's property
	        @param doc  The property's docstring
	        """
	        super( $1, self ).__init__()
	        self._name   = name
	        self.__doc__ = doc
	
	
	    #=========================================================================
	    def __delete__( self, obj ):
	        """
	        Deletes the described property from the object.
	
	        @param obj The property's owner instance
	        """
	        if hasattr( obj, self._name ) == False:
	            raise AttributeError(
	                'Unable to delete unknown property "{}".'.format( self._name )
	            )
	        delattr( obj, self._name )
	
	
	    #=========================================================================
	    def __get__( self, obj, objtype = None ):
	        """
	        Returns the value of the described property.
	
	        @param obj     The property's owner instance
	        @param objtype The owner instance's type or class
	        @return        The return value of the specified getter method
	        """
	        if obj is None:
	            return self
	        if hasattr( obj, self._name ) == False:
	            raise AttributeError(
	                'Unable to get unknown property "{}".'.format( self._name )
	            )
	        return getattr( obj, self._name )
	
	
	    #=========================================================================
	    def __set__( self, obj, value ):
	        """
	        Modifies the value of the described property.
	
	        @param obj   The property's owner instance
	        @param value The value to pass to the specified setter method
	        """
	        if hasattr( obj, self._name ) == False:
	            raise AttributeError(
	                'Unable to set unknown property "{}".'.format( self._name )
	            )
	        setattr( obj, self._name )
	
# end of snippet

# Mapping Type Emulation
snippet map
	#=============================================================================
	class ${1:ImMap}( object ):
	    """
	    Emulates an immutable mapping as an object.
	    This is used in place of attempting to subclass the \`dict\` container, and
	    has the added benefit of being a read-only (by convention) structure.
	    """
	
	    #=========================================================================
	    def __init__( self, *args, **kwargs ):
	        """
	        Initializes an $1 object.
	        """
	        self.${3:_data} = dict( *args, **kwargs )
	
	
	    #=========================================================================
	    def __contains__( self, key ):
	        """
	        Checks for the presense of a key in the map using the \`in\` construct.
	        """
	        return key in self.$3
	
	
	    #=========================================================================
	    def __getitem__( self, key ):
	        """
	        Provides key access to data in the map.
	        """
	        return self.$3[ key ]
	
	
	    #=========================================================================
	    def __iter__( self ):
	        """
	        Produces an iterator for the data in the map.
	        """
	        return iter( self.$3 )
	
	
	    #=========================================================================
	    def __len__( self ):
	        """
	        Returns the number of items in the map.
	        """
	        return len( self.$3 )
	
	
	    #=========================================================================
	    def __str__( self ):
	        """
	        Represents this map as a string.
	        """
	        keys    = self.$3.keys()
	        max_key = max( len( key ) for key in keys )
	        fmt     = '"{1}"{0} : {2}'
	        pairs   = []
	        for key in keys:
	            value = self.$3[ key ]
	            if type( value ) is str:
	                value = '"' + value + '"'
	            pad = max_key - len( key )
	            pairs.append( fmt.format( ( ' ' * pad ), key, value ) )
	        return '{\n    ' + ( ',\n    '.join( pairs ) ) + '\n}'
	
	
	    #=========================================================================
	    def copy( self ):
	        """
	        Returns a shallow copy of the data in the map.
	        """
	        return self.$3.copy()
	
	
	    #=========================================================================
	    def get( self, key, default = None ):
	        """
	        Returns the value of a given key if it is in the map.
	        If it is not in the map, return the default value.
	        """
	        return self.$3.get( key, default )
	
	
	    #=========================================================================
	    def has_key( self, key ):
	        """
	        Tests for the presense of a key in the map.
	        """
	        return self.$3.has_key( key )
	
	
	    #=========================================================================
	    def items( self ):
	        """
	        Returns a list of the map's key-value pairs.
	        """
	        return self.$3.items()
	
	
	    #=========================================================================
	    def iteritems( self ):
	        """
	        Returns an iterator over the list of the map's key-value pairs.
	        """
	        return self.$3.iteritems()
	
	
	    #=========================================================================
	    def iterkeys( self ):
	        """
	        Returns an iterator over the map's keys.
	        """
	        return self.$3.iterkeys()
	
	
	    #=========================================================================
	    def itervalues( self ):
	        """
	        Returns an iterator over the map's values.
	        """
	        return self.$3.itervalues()
	
	
	    #=========================================================================
	    def keys( self ):
	        """
	        Returns a list of the map's keys.
	        """
	        return self.$3.keys()
	
	
	    #=========================================================================
	    def values( self ):
	        """
	        Returns a list of the map's values.
	        """
	        return self.$3.values()
	
	
	#=============================================================================
	class ${2:MMap}( $1 ):
	    """
	    Emulates a mutable mapping as an object.
	    This is used in place of attempting to subclass the \`dict\` container.
	    Note: This container relies on having $1 container in
	    the same module.  If that is not desired, simply copy its methods into
	    this class, and subclass \`object\` instead of $1.
	    """
	
	    #=========================================================================
	    def __init__( self, *args, **kwargs ):
	        """
	        Initializes a $2 object.
	        """
	        super( $2, self ).__init__( *args, **kwargs )
	
	
	    #=========================================================================
	    def __delitem__( self, key ):
	        """
	        Removes an item from the map with the given key.
	        """
	        del self.$3[ key ]
	
	
	    #=========================================================================
	    def __setitem__( self, key, value ):
	        """
	        Modifies a value in the map with the given key.
	        """
	        self.$3[ key ] = value
	
	
	    #=========================================================================
	    def clear( self ):
	        """
	        Removes all items from the map.
	        """
	        self.$3.clear()
	
	
	    #=========================================================================
	    def pop( self, key, *args ):
	        """
	        Removes and returns an item from the map with the given key.
	        If the key doesn't exist, and default is given, return default.
	        """
	        if len( args ) > 0:
	            return self.$3.pop( key, args[ 0 ] )
	        return self.$3.pop( key )
	
	
	    #=========================================================================
	    def popitem( self ):
	        """
	        Removes and returns an arbitrary key-value pair from the map.
	        """
	        return self.$3.popitem()
	
	
	    #=========================================================================
	    def setdefault( self, key, default = None ):
	        """
	        Returns the value of key from the map.
	        If the key doesn't exist, insert a new item into the map with the
	        value specified.
	        """
	        return self.$3.setdefault( key, default )
	
	    #=========================================================================
	    def update( self, other ):
	        """
	        Updates the map with the given key-value pairs, dict, or map.
	        Returns None.
	        """
	        return self.$3.update( other )
	
# end of snippet

# Sequence Type Emulation
snippet sequence
	#=============================================================================
	class ${1:ImSequence}( object ):
	    """
	    Emulates an immutable sequence as an object.
	    This is used in place of attempting to subclass the \`tuple\` container.
	    """
	
	    #=========================================================================
	    def __init__( self, *args, **kwargs ):
	        """
	        Initializes an $1 object.
	        """
	        self.${3:_data} = list( *args, **kwargs )
	
	
	    #=========================================================================
	    def __add__( self, other ):
	        """
	        Implements sequence concatenation via the \`+\` operator.
	        """
	        if type( other ) != list:
	            other = list( other )
	        return self.$3 + other
	
	
	    #=========================================================================
	    def __cmp__( self, other ):
	        """
	        Implements sequence comparison via the \`==\`, \`!=\`, \`<=\`, and \`>=\`
	        operators.
	        """
	        num_mine   = len( self.$3 )
	        num_theirs = len( other )
	        num_diff   = num_mine - num_theirs
	        if num_diff != 0:
	            return num_diff
	        for index in range( num_mine ):
	            diff = self.$3[ index ] - other[ index ]
	            if diff != 0:
	                return diff
	        return 0
	
	
	    #=========================================================================
	    def __contains__( self, value ):
	        """
	        Provides support for searching the sequence using the \`in\` construct.
	        """
	        return value in self.$3
	
	
	    #=========================================================================
	    def __getitem__( self, index ):
	        """
	        Dereference an item in the sequence by index.
	        """
	        if isinstance( index, int ):
	            return self.$3[ index ]
	        elif isinstance( index, slice ):
	            start, stop, step = index.indices( len( self.$3 ) )
	            return self.$3[ start : stop : step ]
	        else:
	            raise TypeError( 'Sequence indexes must be integers or slices.' )
	
	
	    #=========================================================================
	    def __iter__( self ):
	        """
	        Provides an iterator for the sequence.
	        """
	        return iter( self.$3 )
	
	
	    #=========================================================================
	    def __len__( self ):
	        """
	        Get the length of the sequence.
	        """
	        return len( self.$3 )
	
	
	    #=========================================================================
	    def __mul__( self, other ):
	        """
	        Implements sequence repitition via the \`*\` operator.
	        """
	        return self.$3 * other
	
	
	    #=========================================================================
	    def __radd__( self, other ):
	        """
	        Implements reflected sequence concatenation via the \`+\` operator.
	        """
	        if type( other ) != list:
	            other = list( other )
	        return other + self.$3
	
	
	    #=========================================================================
	    def __rmul__( self, other ):
	        """
	        Implements reflected sequence repitition via the \`*\` operator.
	        """
	        return other * self.$3
	
	
	    #=========================================================================
	    def __str__( self ):
	        """
	        Returns a string representation of the sequence.
	        """
	        return '( {} )'.format( ', '.join( str( v ) for v in self.$3 ) )
	
	
	    #=========================================================================
	    def count( self, value ):
	        """
	        Counts the number of occurrences of a value in the sequence.
	        """
	        return self.$3.count( value )
	
	
	    #=========================================================================
	    def index( self, value ):
	        """
	        Returns the first occurrence of a value in the sequence.
	        """
	        return self.$3.index( value )
	
	
	#=============================================================================
	class ${2:MSequence}( $1 ):
	    """
	    Emulates a mutable sequence as an object.
	    This is used in place of attempting to subclass the \`list\` container.
	    Note: This container relies on having $1 container
	    in the same module.  If that is not desired, simply copy its methods into
	    this class, and subclass \`object\` instead of $1.
	    """
	
	    #=========================================================================
	    def __init__( self, *args, **kwargs ):
	        """
	        Initializes a $2 object.
	        """
	        super( $2, self ).__init__( *args, **kwargs )
	
	
	    #=========================================================================
	    def __delitem__( self, index ):
	        """
	        Deletes an item or items from the sequence at a given index or slice.
	        """
	        if isinstance( index, int ):
	            del self.$3[ index ]
	        elif isinstance( index, slice ):
	            start, stop, step = index.indices( len( self.$3 ) )
	            del self.$3[ start : stop : step ]
	        else:
	            raise TypeError( 'Sequence indexes must be integers or slices.' )
	
	
	    #=========================================================================
	    def __iadd__( self, other ):
	        """
	        Implements augmented addition to extend the sequence.
	        """
	        if type( other ) != list:
	            other = list( other )
	        self.$3 += other
	        return self
	
	
	    #=========================================================================
	    def __imul__( self, other ):
	        """
	        Implements augmented multiplication to repeat the sequence in place.
	        """
	        self.$3 *= other
	        return self
	
	
	    #=========================================================================
	    def __setitem__( self, index, value ):
	        """
	        Modifies an item or items in the sequence at a given index or slice.
	        """
	        if isinstance( index, int ):
	            self.$3[ index ] = value
	        elif isinstance( index, slice ):
	            start, stop, step = index.indices( len( self.$3 ) )
	            self.$3[ start : stop : step ] = value
	        else:
	            raise TypeError( 'Sequence indexes must be integers or slices.' )
	
	
	    #=========================================================================
	    def __str__( self ):
	        """
	        Returns a string representation of the sequence.
	        """
	        return '[ {} ]'.format( ', '.join( str( v ) for v in self.$3 ) )
	
	
	    #=========================================================================
	    def append( self, value ):
	        """
	        Appends a value to the end of the sequence.
	        """
	        self.$3.append( value )
	
	
	    #=========================================================================
	    def extend( self, sequence ):
	        """
	        Extends the sequence by appending the given sequence.
	        """
	        self.$3.extend( sequence )
	
	
	    #=========================================================================
	    def insert( self, index, value ):
	        """
	        Inserts a value at the given index.
	        """
	        self.$3.insert( index, value )
	
	
	    #=========================================================================
	    def pop( self, index = None ):
	        """
	        Removes a value at the given index, and returns it.
	        """
	        if index is None:
	            index = len( self.$3 ) - 1
	        return self.$3.pop( index )
	
	
	    #=========================================================================
	    def remove( self, value ):
	        """
	        Removes the first given value and returns it.
	        """
	        self.$3.remove( value )
	
	
	    #=========================================================================
	    def reverse( self ):
	        """
	        Reverses the values in the sequence, in place.
	        """
	        self.$3.reverse()
	
	
	    #=========================================================================
	    def sort( self, cmp = None, key = None, reverse = False ):
	        """
	        Sorts the values, in place.
	        """
	        self.$3.sort( cmp, key, reverse )
	
# end of snippet

#=============================================================================
# Formatting and Style Templates
#=============================================================================

#=============================================================================
# Literals and Common Implementations
#=============================================================================

# Unicode Boilerplace
snippet uni
	# when using as a script, write UTF-8 to stdout
	if sys.stdout.encoding != 'UTF-8':
	    import codecs
	    writer = codecs.getwriter( 'UTF-8' )
	    sys.stdout = writer( sys.stdout )
# end of snippet


#=============================================================================
# Miscellaneous Automation
#=============================================================================

#=============================================================================
# Source Code Templates
#=============================================================================

# Minimal Common Entry-point Starter
snippet main
	#=============================================================================
	def main( argv ):
	    """
	    Script execution entry point
	
	    @param argv List of arguments passed to the script
	    @return     Shell exit code (0 = success)
	    """
	
	    # Return result.
	    return 0
	
	
	#=============================================================================
	if __name__ == "__main__":
	    import sys
	    sys.exit( main( sys.argv ) )
	
# end of snippet

# Generic Shell Script
snippet shell
	#!/usr/bin/env python
	#=============================================================================
	#
	# ${1:Shell Script}
	#
	#=============================================================================
	
	"""
	$1
	========
	"""
	
	
	import sys
	
	
	__version__ = '0.0.0'
	
	
	#=============================================================================
	def main( argv ):
	    """
	    Script execution entry point
	
	    @param argv List of arguments passed to the script
	    @return     Shell exit code (0 = success)
	    """
	
	    # Import argparse when using this module as a script.
	    import argparse
	
	    # Create and configure an argument parser.
	    parser = argparse.ArgumentParser(
	        description = '$1',
	        add_help    = False
	    )
	    parser.add_argument(
	        '-h',
	        '--help',
	        default = False,
	        help    = 'Display this help message and exit.',
	        action  = 'help'
	    )
	    parser.add_argument(
	        '-v',
	        '--version',
	        default = False,
	        help    = 'Display script version and exit.',
	        action  = 'version',
	        version = __version__
	    )
	
	    # Parse the arguments.
	    args = parser.parse_args( argv[ 1 : ] )
	
	    # Check args.* for script execution here.
	    $2print 'Template code executed.  Replace with real code.'
	
	    # Return result.
	    return 0
	
	
	#=============================================================================
	if __name__ == "__main__":
	    sys.exit( main( sys.argv ) )
	
# end of snippet

# New Simple Module
snippet source
	#=============================================================================
	#
	# ${1:A Module}
	#
	#=============================================================================
	
	"""
	$1
	========
	"""
	
	
# end of snippet

# New unittest Test Script
snippet test
	#!/usr/bin/env python
	#=============================================================================
	#
	# ${1:module} Module Unit Tests
	#
	#=============================================================================
	
	"""
	$1 Module Unit Tests
	============================
	"""
	
	
	import unittest
	
	
	import $1
	
	
	#=============================================================================
	class $1Tests( unittest.TestCase ):
	    """
	    Tests the $1 module
	    """
	
	
	    #=========================================================================
	    def setUp( self ):
	        """
	        Performs test setup.
	        """
	        pass
	
	
	    #=========================================================================
	    def test_${2:method}( self ):
	        """
	        Tests the $1.$2 method.
	        """
	        pass
	
	
	# Run tests when run directly from the shell.
	if __name__ == '__main__':
	    unittest.main()
	
# end of snippet

# unittest Special Methods
snippet tmeth
	    def tearDown( self ):
	        """
	        Performs test tear-down.
	        """
	        pass
	
	
	    def runTest( self ):
	        """
	        Performs simple tests.
	        """
	        pass
	
	
# end of snippet

# unittest Assertion Reference
snippet tass
	        # All can take a msg = 'message' keyword argument.
	        # Value comparison, checking
	        self.assertEqual( a, b )
	        self.assertNotEqual( a, b )
	        self.assertTrue( x )
	        self.assertFalse( x )
	        self.assertIs( a, b )
	        self.assertIsNot( a, b )
	        self.assertIsNone( x )
	        self.assertIsNotNone( x )
	        self.assertAlmostEqual( a, b, places = 7 )
	        self.assertNotAlmostEqual( a, b, places = 7 )
	        self.assertGreater( a, b )
	        self.assertGreaterEqual( a, b )
	        self.assertLess( a, b )
	        self.assertLessEqual( a, b )
	        # Object interrogation
	        self.assertIn( a, b )
	        self.assertNotIn( a, b )
	        self.assertIsInstance( a, b )
	        self.assertIsNotInstance( a, b )
	        # Exceptions
	        self.assertRaises( exc, fun, *args, **kwargs )
	        self.assertRaisesRegexp( exc, expr, fun, *args, **kwargs )
	        # Text matches a regular expression
	        self.assertRegexpMatches( text, expr )
	        self.assertNotRegexpMatches( text, expr )
	        # Composite type contents
	        self.assertItemsEqual( actual, expected )
	        self.assertTypeEqualityFunc( typeobj, function )
	        self.assertMultiLineEqual( a, b )
	        self.assertSequenceEqual( a, b )
	        self.assertListEqual( a, b )
	        self.assertTupleEqual( a, b )
	        self.assertSetEqual( a, b )
	        self.assertDictEqual( expected, actual )
# end of snippet

