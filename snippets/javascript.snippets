# JavaScript Code Snippets

# Separator Bars
snippet b0
	/*--------------------------------------------------------------------------*/
snippet b1
	  /*------------------------------------------------------------------------*/

# Blocky Comments
snippet c0
	/*----------------------------------------------------------------------------
	${1}
	----------------------------------------------------------------------------*/
snippet c1
	  /*--------------------------------------------------------------------------
	  ${1}
	  --------------------------------------------------------------------------*/
snippet c2
	    /*------------------------------------------------------------------------
	    ${1}
	    ------------------------------------------------------------------------*/

# Functions
snippet fun
	/**
	 *  ${2:description}
	 *
	 */
	function ${1:name}() {
	
	  ${3}
	}
snippet vfun
	/**
	 *  ${2:description}
	 *
	 *  @param param Description
	 *  @return
	 *  @throws
	 */
	function ${1:name}( param ) {
	
	  ${3}
	
	  return false;
	}

# Other Structured Things
snippet class
	/*----------------------------------------------------------------------------
	${2:description}
	----------------------------------------------------------------------------*/
	${1:name} = ( function( ns ) {
	
	  ${3}
	
	  return ns;
	} )( $1 || {} );
snippet event
	${1:object}.addEventListener(
	  '${2:event}',
	  function( event ) {
	    ${3}
	  },
	  false
	);
snippet arg
	var ${1:name} = arguments.length > ${2:0} ? arguments[ $2 ];

# main()-like setup
snippet main
	/**
	 *  Runs the script from the beginning.
	 *
	 *  @param argv Script parameters
	 *  @return     True on success, false on abnormal termination
	 */
	function main( argv ) {
	
	  //Begin script execution.
	  ${1}
	
	  //Return normal termination status.
	  return true;
	}
	
	//Run the script's entry point once the page has loaded.
	window.addEventListener(
	  'load',
	  function( event ) {
	    if( 'main' in window ) {
	      var hash = window.location.hash.replace( /^#/, '' );
	      var argv = hash.split( /(?:[+\s]|%20)*(?<!\),(?:[+\s]|%20)*/ );
	      window.main.apply( window, argv );
	    }
	  },
	  false
	);

# Quick-and-dirty HTTP GET Expecting JSON
snippet http
	var HTTP = function( callback ) {
	  this.xhr = new XMLHttpRequest();
	  this.xhr.timeout   = 60 * 1000;
	  this.xhr.onabort   = function( e ) { throw new Error( 'XHR aborted.' ); };
	  this.xhr.onerror   = function( e ) { throw new Error( 'XHR error.' ); };
	  this.xhr.ontimeout = function( e ) { throw new Error( 'XHR timed out.' ); };
	  this.xhr.onload    = function( callback ) {
	    return function( e ) {
	      var rctype = this.getResponseHeader( 'content-type' );
	      var ectype = 'application/json';
	      if( rctype.substr( 0, ectype.length ) != ectype ) {
	        throw new Error( "Invalid content type: " + rctype );
	      }
	      callback( JSON.parse( this.responseText ) );
	    }
	  }( callback );
	  this.get = function( url ) {
	    this.xhr.open( 'GET', url, true );
	    this.xhr.send( null );
	  };
	};
	//var h = new HTTP( function( j ) { console.log( JSON.stringify( j ) ); } );
	//h.get( 'example.json' );

# Library submodule source
snippet library
	/*****************************************************************************
	${1:Library Title}
	
	*****************************************************************************/
	
	/*----------------------------------------------------------------------------
	Library Boilerplate
	----------------------------------------------------------------------------*/
	var ${3:hz} = ( function( ns ) { return ns; } )( $3 || {} );
	
	/*----------------------------------------------------------------------------
	Module Dependencies
	----------------------------------------------------------------------------*/
	/*?jspp { "include" : { "$3" : [] } } ?*/
	
	/*----------------------------------------------------------------------------
	$1 Submodule
	----------------------------------------------------------------------------*/
	$3.${2:submodule} = ( function( ns ) {
	
	    /*------------------------------------------------------------------------
	    Public Properties
	    ------------------------------------------------------------------------*/
	
	    /*------------------------------------------------------------------------
	    Public Methods
	    ------------------------------------------------------------------------*/
	
	    /*------------------------------------------------------------------------
	    Classes
	    ------------------------------------------------------------------------*/
	
	    /*------------------------------------------------------------------------
	    Private Properties
	    ------------------------------------------------------------------------*/
	
	    /*------------------------------------------------------------------------
	    Private Methods
	    ------------------------------------------------------------------------*/
	
	
	    return ns;
	} )( $3.$2 || {} );
	

# Generic script source
snippet source
	/*****************************************************************************
	${1:description}
	
	*****************************************************************************/
	
	/*----------------------------------------------------------------------------
	Dependencies
	----------------------------------------------------------------------------*/
	/*?jspp { "include" : { "hz" : [] } } ?*/
	
	/*----------------------------------------------------------------------------
	${2}
	----------------------------------------------------------------------------*/
	

# Various API Time-savers
snippet gi
	document.getElementById( '${1:id}' );
snippet gt
	${2:document}.getElementsByTagName( '${1:tag}' );
snippet ce
	document.createElement( '${1:tag}' );
snippet ct
	document.createTextNode( '${1:text}' );
snippet at
	.appendChild( document.createTextNode( '${1:text}' ) );

