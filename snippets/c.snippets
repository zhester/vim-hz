##############################################################################
#
# C Code Snippets
#
##############################################################################

#=============================================================================
# Structural Comments
#=============================================================================

# Comment Blocks
snippet c0
	/*------------------------------------------------------------------------
	${1}
	------------------------------------------------------------------------*/
snippet c1
	    /*--------------------------------------------------------------------
	    ${1}
	    --------------------------------------------------------------------*/
snippet c2
	        /*----------------------------------------------------------------
	        ${1}
	        ----------------------------------------------------------------*/
snippet c3
	            /*------------------------------------------------------------
	            ${1}
	            ------------------------------------------------------------*/
snippet c4
	                /*--------------------------------------------------------
	                ${1}
	                --------------------------------------------------------*/
snippet c5
	                    /*----------------------------------------------------
	                    ${1}
	                    ----------------------------------------------------*/
snippet c6
	                        /*------------------------------------------------
	                        ${1}
	                        ------------------------------------------------*/
# end of snippet

# Separator Bars
snippet b0
	/*==========================================================================*/
snippet b1
	    /*======================================================================*/
snippet b2
	        /*==================================================================*/
# end of snippet


#=============================================================================
# Function and Class Templates
#=============================================================================

# Basic function definition
snippet fun
	/*==========================================================================*/
	int ${1:name}(                               /* ${2:description}                      */
	    int                 param           /* ${3:param}                            */
	) {                                     /* ${4:returns}                          */
	
	    /*--------------------------------------------------------------------
	    Local Variables
	    --------------------------------------------------------------------*/
	    int                 local           /* a local variable                 */
	
	    ${5}
	
	    /*--------------------------------------------------------------------
	    Return
	    --------------------------------------------------------------------*/
	    return 0;
	}
	
# end of snippet

# Verbose function definition
snippet vfun
	/*==========================================================================*/
	int ${1:name}(                               /* ${2:description}                      */
	    int                 param           /* ${3:param}                            */
	) {                                     /* ${4:returns}                          */
	
	    /*hz------------------------------------------------------------------
	    A verbose discussion about what this function does, or how it's
	    implemented, or further detail about particular usage scenarios. These
	    comments are formatted in a "templated" type of Markdown syntax.
	
	    Calling out a particular \`symbol\` (potentially linked to code) is
	    easy.  It even works if you like to use \`function()\` to make it
	    obvious you're talking about a function.
	
	    Generated Documentation
	    =======================
	
	    This style uses a lot of self-imposed rules for documenting code more
	    inline with the code, rather than through huge blocks of text (this
	    worst-case template doesn't help illustrate that).  You can generate
	    documentation from other comments by hooking into the inline comments
	    here.
	
	    ### Examples
	
	    Given the following enumeration (in real code, # = *):
	
	        enum {                           /# enum description                #/
	            ITEM_0,                      /# comment for item 0              #/
	            ITEM_1,                      /# comment for item 1              #/
	            NUM_ITEMS                    /# # this is the number of items   #/
	        };
	
	    Generate a two-column list of items in the enumeration:
	
	        {{enum,enum description}}
	
	    Another example:
	
	        static const char   strings[ 4 ][ 32 ] = {
	            "a", "list", "of", "strings"
	        };
	
	    List of all strings:
	
	        {{const,strings}}
	
	    Single string from list:
	
	        {{const,strings[2]}}
	
	    Verbose Interface Documentation
	    ===============================
	
	    @param argc
	    This is the expanded document string for this parameter.
	
	    @param argv
	    This is the expanded document string discussing the second parameter
	    because it's fairly complex.
	
	    Each entry here can also have sections, paragraphs, tables, and use
	    all the markup features described above.
	
	    @return
	    This is the expanded document string discussing all the different
	    return values.
	    --------------------------------------------------------------------*/
	
	    /*--------------------------------------------------------------------
	    Local Variables
	    --------------------------------------------------------------------*/
	    int                 local;          /* local variable                   */
	
	    /*--------------------------------------------------------------------
	    Initialize local variables.
	    --------------------------------------------------------------------*/
	    local = 0;
	
	    /*--------------------------------------------------------------------
	    Do something here.
	    --------------------------------------------------------------------*/
	    local += argc;
	
	    /*--------------------------------------------------------------------
	    Return the results.
	    --------------------------------------------------------------------*/
	    return local;
	}
	
# end of snippet

# Doxygen-style function
snippet doxyfun
	/**
	 *  ${1:name}
	 *
	 *  ${2:description}
	 *
	 *  @param param Parameter description
	 *  @return      Return description
	 */
	void function(
	    void
	) {
	
	    ${3}
	
	}
	
# end of snippet


#=============================================================================
# Formatting and Style Templates
#=============================================================================

# Columns reminder
snippet col
	+---+-------------------+---------------+-------------------------------+---+
	|1  |4                  |25             |41                             |73 |77
	/*****************************************************************************
	File Header
	*****************************************************************************/
	/*============================================================================
	Section Heading
	============================================================================*/
	    type                name;           /* variable comment                 */
	/*------------------------------------------------------------------------
	Block Comment
	------------------------------------------------------------------------*/
	    /*--------------------------------------------------------------------
	    Block Comment
	    --------------------------------------------------------------------*/
	        /*----------------------------------------------------------------
	        Block Comment
	        ----------------------------------------------------------------*/
	|1  |4                  |25             |41                             |73 |77
	+---+-------------------+---------------+-------------------------------+---+
# end of snippet

# Variable declaration
snippet var
	    ${1:type}                ${2:name};           /* ${3:comment}                          */
# end of snippet


#=============================================================================
# Literals and Common Implementations
#=============================================================================

# main()
snippet main
	/*==========================================================================*/
	int main(                               /* program entry point              */
	    int                 argc,           /* number of arguments              */
	    const char**        argv            /* list of arguments                */
	) {                                     /* return program exist status      */
	
	    /*--------------------------------------------------------------------
	    Comment.
	    --------------------------------------------------------------------*/
	    ${1}
	
	    /*--------------------------------------------------------------------
	    Return to shell.
	    --------------------------------------------------------------------*/
	    return EXIT_SUCCESS;
	}
	
# end of snippet

# WinMain()
snippet winmain
	/*==========================================================================*/
	int WINAPI WinMain(                     /* program entry point              */
	    HINSTANCE           hInstance,      /* handle to program instance       */
	    HINSTANCE           hPrevInst,      /* handle to previous instance      */
	    LPTSTR              lpCmdLine,      /* pointer to command-line string   */
	    int                 nShowCmd        /* initial window display setting   */
	) {                                     /* return program exit status       */
	
	    /*--------------------------------------------------------------------
	    Display a message.
	    --------------------------------------------------------------------*/
	    MessageBoxW(
	        NULL,
	        L"Hello World!",
	        L"Greetings",
	        ( MB_OK | MB_ICONINFORMATION )
	    );
	
	    /*--------------------------------------------------------------------
	    Return to shell.
	    --------------------------------------------------------------------*/
	    return EXIT_SUCCESS;
	}
	
# end of snippet


#=============================================================================
# Miscellaneous Automation
#=============================================================================

# #include "..."
snippet inc
	#include "${1:`Filename("$1.h")`}"
# end of snippet


#=============================================================================
# Source Code Templates
#=============================================================================

# Source code template
snippet source
	/*****************************************************************************
	
	${1:`Filename()`}.c
	
	${2:description}
	
	*****************************************************************************/
	
	/*============================================================================
	Includes
	============================================================================*/
	
	/*============================================================================
	Macros
	============================================================================*/
	
	/*============================================================================
	Types and Structures
	============================================================================*/
	
	/*============================================================================
	Memory Constants
	============================================================================*/
	
	/*============================================================================
	Module Variables
	============================================================================*/
	
	/*============================================================================
	Module Prototypes
	============================================================================*/
	
	/*============================================================================
	Implementation
	============================================================================*/
	
	${3}
	
# end of snippet

# Header
snippet header
	/*****************************************************************************
	
	${1:`Filename()`}.h
	
	${2:description}
	
	*****************************************************************************/
	
	#ifndef _${3:`toupper(Filename())`}_H
	#define _$3_H
	
	/*============================================================================
	Includes
	============================================================================*/
	
	/*============================================================================
	Macros
	============================================================================*/
	
	/*============================================================================
	Types and Structures
	============================================================================*/
	
	/*============================================================================
	Memory Constants
	============================================================================*/
	
	/*============================================================================
	Exported Variables
	============================================================================*/
	
	/*============================================================================
	Interface Prototypes
	============================================================================*/
	
	${4}
	
	#endif  /* _$3_H */
	
# end of snippet

